
worker_processes  1;        #nginx worker 数量
#worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;
worker_rlimit_nofile 4096;
worker_rlimit_core 10000m;
# error_log logs/error.log;   #指定错误日志文件路径

events {
    #use epoll;
    worker_connections 4096;
    accept_mutex on;
    multi_accept on;
}

#user root admin;
#user root;
http{
    # 开启第三方登录授权
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Headers DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type;
    add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
    add_header Access-Control-Expose-Headers 'WWW-Authenticate,Server-Authorization,User-Identity-Token';

    # ngx 类型默认映射
    include mime.types;

    # 默认 使用 octet-stream
    default_type  application/octet-stream;

    # 加载多个项目的配置文件
    #include mysql.conf;
    
    # 设置默认库搜索路径
    lua_package_path 'lua/?.lua;lua/modules/?.lua;/usr/local/share/lua/5.1/?.lua;/opt/openresty/nginx/lualib/;;';
    lua_package_cpath '/opt/openresty/lualib/?.so;/usr/local/lib/lua/5.1/?.so;;';

    lua_code_cache off;
    server_tokens off;
    tcp_nopush on;
    tcp_nodelay on;
    access_log off;

    send_timeout 10s;
    keepalive_timeout 60;

    lua_max_pending_timers 20480;   #最大等待任务数 可以创建timer总数量
    lua_max_running_timers 10240;   #最大同时运行任务数

    # 共享内存定义
    lua_shared_dict ngx_cache 128m;
    lua_shared_dict ngx_locks 100m;
    lua_shared_dict sessions 100m;
    lua_shared_dict balance_cache 128m; #主要用于缓存各个渠道 游戏平台的余额

    #错误页面导航预定义 隐藏系统的环境
    error_page 403   /403.html;  #(Forbidden/禁止)
    error_page 400 401 402 404 405  406 407 408 /40x.html;  #Bad Request/错误请求
    error_page 409 410 411 412 413 414 415 416 417 /40x.html; #详情见http状态
    error_page 444 /out_error.do;
    ##502 等错误可以用同样的方法来配置。
    error_page  500 502 503 504  /50x.html;

    # 日志级别
    error_log  logs/error.log error;    

    # 采用GZIP进行传输, 加速传输
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    #gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/json;
    gzip_vary off;
    gzip_disable "MSIE [1-6]\.";

    
    # nginx初始化执行脚本
    init_by_lua_file lua/init_nginx.lua;

    # worker初始化执行脚本
    init_worker_by_lua_file lua/init_worker.lua;
    client_max_body_size 64M; #多少M根据实际情况填写

    lua_socket_log_errors off;
    lua_code_cache off;
    access_log off;

    # DNS解析服务器地址
    resolver 114.114.114.114 8.8.8.8;

    # 服务器配置
    server {
        # 服务端口
        listen 9000;
	
	# HTTPS 443 端口配置
        #listen 443 ssl http2 default_server;
        server_name xxx.com www.xxx.com;
        index index.html index.htm index.php;

        #ssl on;
        #ssl_certificate SSL/auto0917.com_bundle.crt;
        #ssl_certificate_key SSL/auto0917.com.key;
        #ssl_session_cache    shared:SSL:1m;
        #ssl_session_timeout  5m;
        #ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_prefer_server_ciphers  on;
        #allow 192.168.0.102;
        #deny all;

        # error_page 497 https://www.$server_name$request_uri;

        location / {
            #default_type text/html;
            # 指定对应uri的资源查找路径
            root		html;
            default_type	"text/html; charset=utf-8";
            # content_by_lua	'ngx.say("<p>Hello, World!</p>")';
            index           	index.shtml index.html index.htm;
            
	    if ( $request_uri = "/" ) {
                rewrite "/" https://www.$server_name/PC/login.html break;
            }
        }


        # api访问
        location ~ ^/([-_a-zA-Z0-9/.]+).do$ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Credentials true;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
                return 200;
            }

            set $serverType 1;  # api 服务
            client_max_body_size 1m; 	#根据实际情况修改设置
            client_body_buffer_size 1m; #根据实际情况修改设置
            default_type "application/json; charset=utf-8";
            #access_by_lua_file  lua/base/auth/access.lua;
            content_by_lua_file lua/modules/$1.lua;
            # log_by_lua_file lua/modules/log/log.lua;
        }

        # api 访问
        location ~ ^/([-_a-zA-Z0-9/.]+)/([-_a-zA-Z0-9.]+).action$ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Credentials true;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
                return 200;
            }
            set $modulename $1;
            set $action $2;

            set $serverType 1;  # api 服务
            default_type "application/json; charset=utf-8";
            #access_by_lua_file  lua/base/auth/access.lua;
            content_by_lua_file lua/base/dispatch.lua;
            # log_by_lua_file lua/modules/log/log.lua;
        }

        # 默认的html访问
        location ~ ^/([-_a-zA-Z0-9/]+).shtml$ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Credentials true;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
                return 200;
            }
            set $mpath $1;
            set $clazz $2;
            set $action $3;
            set $serverType 3;  # api 服务
            #rewrite_by_lua_file lua/common/file_redirect.lua;
            default_type "text/html; charset=utf-8";
            root html/;
            access_by_lua_file  lua/auth/web_auth.lua;
            content_by_lua_file lua/modules/$1.lua;
            # log_by_lua_file lua/modules/log/log.lua;
        }

        # 默认的资源文件导向
        location ~ ^/([-_a-zA-Z0-9/.]+).(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css|ttf|woff|woff2)$  {
            root html/;
        }

        # 默认没有结尾的导航,默认导航到index.shtml目录下
        location ~ ^/([-_a-zA-Z0-9/]+)/  {
            #rewrite_by_lua_file lua/common/file_redirect.lua;
            #default_type application/xhtml+xml;
            root html/;
            index  index.shtml index.html index.htm;
        }

        # 带版本的静态化导航
        location ~ ^/([-_a-zA-Z0-9/.]+).(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css|ttf|woff|woff2)([-_a-zA-Z0-9/.]+)  {
            #rewrite_by_lua_file lua/common/file_redirect.lua;
            #default_type application/xhtml+xml;
            root html/;
        }
    }

    # include vhosts/*;
}

stream {
    # define a TCP server listening on the port:
    server {
        listen 9001;

        # content_by_lua_block {
        #     ngx.say("Hello, Lua!")
        # }

        #lua_check_client_abort off;
        #content_by_lua_block {
        #    local sock = ngx.req.socket()
        #    local res, err, part = sock:receive("*a")
        #    if not res then
        #        ngx.log(ngx.NOTICE, "failed to receive: ", err, ": ", part)
        #        return
        #    end
        #    ngx.say("received data: ", res)
        #}
        content_by_lua_file lua/modules/socket/tcp_content.lua;
    }
}
