worker_processes  1; # nginx worker 数量

events {
    worker_connections 2048;
}

error_log logs/error.log;

http {
    # 开启第三方登录授权
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Headers DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type;
    add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
    add_header Access-Control-Expose-Headers 'WWW-Authenticate,Server-Authorization,User-Identity-Token';

    # 设置默认库搜索路径
    lua_package_path 'lua/?.lua;/opt/openresty/lualib/?;;';

    # nginx初始化执行脚本
    init_by_lua_file lua/init_nginx.lua;

    # worker初始化执行脚本
    init_worker_by_lua_file lua/init_worker.lua;
    client_max_body_size 64M; #多少M根据实际情况填写

    lua_socket_log_errors off;
    lua_code_cache off;
    access_log off;


    # 服务器配置
    server {
        # 服务端口
        listen 9000;
        location / {
            # 指定对应uri的资源查找路径
            root html;
            default_type "text/html; charset=utf-8";
            # content_by_lua 'ngx.say("<p>Hello, World!</p>")';
            index index.lsp index.html index.htm index.lhtml;
        }

        # api 访问
        location ~ ^/([-_a-zA-Z0-9/.]+).do$ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Credentials true;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
                return 200;
            }

            client_max_body_size 1m; #根据实际情况修改设置
            client_body_buffer_size 1m; #根据实际情况修改设置
            default_type "application/json; charset=utf-8";
            content_by_lua_file lua/base/dispatch.lua;
        }

        # api 访问
        location ~ ^/([-_a-zA-Z0-9/.]+)/([-_a-zA-Z0-9.]+).action$ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Credentials true;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
                return 200;
            }
            set $modulename $1;
            set $action $2;

            set $serverType 1;  # api 服务
            default_type "application/json; charset=utf-8";
            #access_by_lua_file  lua/ngx_base/auth/token_auth.lua;
            content_by_lua_file lua/base/dispatch.lua;
        }
    }
}

stream {
    # define a TCP server listening on the port 1234:
    server {
        listen 9001;

        # content_by_lua_block {
        #     ngx.say("Hello, Lua!")
        # }

        #lua_check_client_abort off;
        #content_by_lua_block {
        #    local sock = ngx.req.socket()
        #    local res, err, part = sock:receive("*a")
        #    if not res then
        #        ngx.log(ngx.NOTICE, "failed to receive: ", err, ": ", part)
        #        return
        #    end
        #    ngx.say("received data: ", res)
        #}

        content_by_lua_file lua/modules/socket/tcp_content.lua;
    }
}
