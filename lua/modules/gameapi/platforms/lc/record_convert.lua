---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/3/27 10:49
---
local sys = require("server.sys")
local api_def = require("gapi_platform.three_game.lc.lc_api_def")
local string_help = require("resty.utils.string_help")

local _M = {}

--[[
    DZPK:   德州扑克
    EBR:    二八杠
    QZNN:   抢庄牛牛
    ZJH:    炸金花
    SG：    三公
    YZLH：  压庄龙虎
    TOP：   21点
    TBNN：  通比牛牛
    QZPJ：  抢庄牌九
    JSZJH:  急速炸金花
    DDZ:    斗地主
    SSS:    十三张
    YYWZ:   幸运五张
    SLM:    射龙门
    KSZ:    看三张抢庄牛牛
    BJL:    百家乐
]]

local function get_card_value(card)
    --ngx.log(ngx.ERR, "get_card_value, card:", card)
    local card_value = nil
    if card == "42" or card == "43" then
        card_value = api_def.JOKER_MAP[card]
    else
        local suit = string.sub(card, 1, 1)
        local number = string.sub(card, 2, 2)
        --ngx.log(ngx.ERR, "suit:", suit)
        --ngx.log(ngx.ERR, "number:", number)
        card_value = api_def.SUIT_MAP[tostring(suit)]*13+api_def.NUMBER_MAP[tostring(number)]
    end
    return card_value
end

local function convert(card_value, player_num, card_count, empty_card)
    local players = {}
    --一共多少人
    for i=1,player_num do
        local player = {}
        player.seat_no = i
        player.cards = {}
        local cards = string.sub(card_value, (i-1)*card_count*2+1, i*card_count*2)
        local empty = nil
        if empty_card then
            if cards == empty_card then
                empty = true
            end
        end
        if not empty then
            --每人多少张牌
            for j=1, card_count do
                local card = string.sub(cards, (j-1)*2+1, j*2)
                local card_num = get_card_value(card)
                table.insert(player.cards, card_num)
            end
            table.insert(players, player)
        end
    end
    return players
end

local function public_convert(card_value, start_index, end_index, card_count)
    local public = {}
    local cards = string.sub(card_value, start_index, end_index)
    --公共牌张数
    for j=1, card_count do
        local card = string.sub(cards, (j-1)*2+1, j*2)
        local card_num = get_card_value(card)
        table.insert(public, card_num)
    end
    return public
end

local function ebr_convert(card_value, player_num, card_count, empty_card)
    local players = {}
    --一共多少人
    for i=1,player_num do
        local player = {}
        player.seat_no = i
        player.cards = {}
        local cards = string.sub(card_value, (i-1)*card_count+1, i*card_count)
        if cards ~= empty_card then
            --每人多少张牌
            for j=1, card_count do
                local card = string.sub(cards, j, j)
                local card_num = api_def.EBR_CARD_MAP[card]
                table.insert(player.cards, card_num)
            end
            table.insert(players, player)
        end
    end
    return players
end

local function pj_convert(card_value, player_num, card_count, empty_card)
    local players = {}
    for i=1,player_num do
        local player = {}
        player.seat_no = i
        player.cards = {}
        local cards = string.sub(card_value, (i-1)*card_count*2+1, i*card_count*2)
        if cards ~= empty_card then
            for j=1, card_count do
                local card = string.sub(cards, (j-1)*2+1, j*2)
                table.insert(player.cards, card)
            end
            table.insert(players, player)
        end
    end
    return players
end

local function sss_convert(card_value)
    local function get_cards(cards, card_count)
        local card_array = {}
        for i=1,card_count do
            local card = string.sub(cards, (i-1)*2+1, i*2)
            table.insert(card_array, get_card_value(card))
        end
        return card_array
    end
    local players = {}
    local player_card = string_help.Split(card_value, ";")
    for i=1,#player_card do
        if player_card[i]~="0" then
            local player = {}
            player.seat_no = string.sub(player_card[i],#player_card[i], #player_card[i])
            player.cards = {}
            local part_card = string_help.Split(player_card[i], ",")
            if #part_card == 1 then
                local card_info = {}
                card_info.type = string.sub(player_card[i],#player_card[i]-2, #player_card[i]-1)
                card_info.cards = get_cards(string.sub(player_card[i], 1, #player_card[i]-3),13)
                table.insert(player.cards,card_info)
            else
                --普通牌型
                for j=1,#part_card-1 do
                    local card_info = {}
                    if j==1 then
                        --第一墩牌3张
                        card_info.type = string.sub(part_card[j],#part_card[j], #part_card[j])
                        card_info.cards = get_cards(part_card[j], 3)
                        table.insert(player.cards,card_info)
                    else
                        --其余两墩牌5张
                        card_info.type = string.sub(part_card[j],#part_card[j], #part_card[j])
                        card_info.cards = get_cards(part_card[j], 5)
                        table.insert(player.cards,card_info)
                    end
                end
            end
            table.insert(players, player)
        end
    end
    return players
end

local function xywz_convert(card_value, card_count)
    local cards = {}
    --一共多少人
    for j=1, card_count do
        local card = string.sub(card_value, (j-1)*2+1, j*2)
        local card_num = get_card_value(card)
        table.insert(cards, card_num)
    end
    return cards
end

local function slm_convert(card_value)
    local cards = {}
    for i=1,math.floor(#card_value/2) do
        local card = string.sub(card_value, (i-1)*2+1, i*2)
        local card_num = get_card_value(card)
        table.insert(cards, card_num)
    end
    return cards
end

local function bjl_convert(card_value, start_index, end_index, card_count, empty_card)
    local card_array = {}
    local cards = string.sub(card_value, start_index, end_index)
    --每人多少张牌
    for j=1, card_count do
        local card = string.sub(cards, (j-1)*2+1, j*2)
        if card~=empty_card then
            local card_num = get_card_value(card)
            table.insert(card_array, card_num)
        end
    end
    return card_array
end

local function top_convert(card_value)
    local function get_apart_card(sub_card_value)
        local cards = {}
        local apart_cards = string_help.Split(sub_card_value, "-")
        for i=1,#apart_cards do
            local apart_card = {}
            for j=1,math.floor(#apart_cards[i])/2 do
                table.insert(apart_card, get_card_value(string.sub(apart_cards[i],(j-1)*2+1,j*2)))
            end
            table.insert(cards, apart_card)
        end
        return cards
    end
    local players = {}
    local player_cards = string_help.Split(card_value, ",")
    for i=1,#player_cards do
        local player = {}
        local seats_cards = string_help.Split(player_cards[i], "|")
        if #seats_cards>=2 then
            player.bet_area = {}
        end
        for j=1, #seats_cards do
            if j==1 then
                player.seat_no = tonumber(string.sub(seats_cards[j], 1, 1))
                player.cards = get_apart_card(string.sub(seats_cards[j], 2, #seats_cards[j]))
            else
                table.insert(player.bet_area, tonumber(string.sub(seats_cards[j], 1, 1)))
                local bet_player = {}
                bet_player.seat_no = tonumber(string.sub(seats_cards[j], 1, 1))
                bet_player.cards = get_apart_card(string.sub(seats_cards[j], 2, #seats_cards[j]))
                table.insert(players, bet_player)
            end
        end
        table.insert(players, player)
    end
    return players
end

--德州扑克牌局信息转换
local function DZPK(item)
    --ngx.log(ngx.ERR, "德州扑克牌局信息:",item.card_value)
    local dzpk_info = api_def.GAME_INFO.DZPK
    local card_value = item.card_value
    if #card_value ~= dzpk_info.card_value_bytes then
        ngx.log(ngx.ERR, "牌局信息错误,card_value:", card_value)
        return nil, "牌局信息错误"
    end
    local info = {}
    info.self_seat_no = item.chair_id
    info.players = convert(card_value, dzpk_info.player_num, dzpk_info.card_count, dzpk_info.empty_card)
    info.public = public_convert(card_value, dzpk_info.p_start_index,dzpk_info.p_end_index,dzpk_info.p_card_count)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "德州扑克牌局转换info:", sys.utils.json_encode(info))
    return info
end
_M.DZPK = DZPK

--二八杠牌局信息转换
local function EBR(item)
    --ngx.log(ngx.ERR, "二八杠牌局信息:",item.card_value)
    local ebr_info = api_def.GAME_INFO.EBR
    local card_value = item.card_value
    if #card_value ~= ebr_info.card_value_bytes then
        ngx.log(ngx.ERR, "牌局信息错误,card_value:", card_value)
        return nil, "牌局信息错误"
    end
    local info = {}
    info.self_seat_no = item.chair_id
    info.banker_seat_no = tonumber(string.sub(card_value, #card_value,#card_value))
    info.players = ebr_convert(card_value,ebr_info.player_num, ebr_info.card_count, ebr_info.empty_card)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "二八杠转换info:", sys.utils.json_encode(info))
    return info
end
_M.EBR = EBR

--抢庄牛牛牌局信息转换
local function QZNN(item)
    --ngx.log(ngx.ERR, "抢庄牛牛牌局信息:",item.card_value)
    local qznn_info = api_def.GAME_INFO.QZNN
    local card_value = item.card_value
    if #card_value ~= qznn_info.card_value_bytes then
        ngx.log(ngx.ERR, "牌局信息错误,card_value:", card_value)
        return nil, "牌局信息错误"
    end
    local info = {}
    info.self_seat_no = item.chair_id
    info.banker_seat_no = tonumber(string.sub(card_value, #card_value,#card_value))
    info.players = convert(card_value,qznn_info.player_num,qznn_info.card_count,qznn_info.empty_card)
    --ngx.log(ngx.ERR, "抢庄牛牛转换info:", sys.utils.json_encode(info))
    return info
end
_M.QZNN = QZNN

local function ZJH(item)
    --ngx.log(ngx.ERR, "炸金花牌局信息:",item.card_value)
    local zjh_info = api_def.GAME_INFO.ZJH
    local card_value = item.card_value
    if #card_value ~= zjh_info.card_value_bytes then
        ngx.log(ngx.ERR, "牌局信息错误,card_value:", card_value)
        return nil, "牌局信息错误"
    end
    local info = {}
    info.self_seat_no = item.chair_id
    info.winner_seat_no = tonumber(string.sub(card_value, #card_value,#card_value))
    info.players = convert(card_value, zjh_info.player_num, zjh_info.card_count, zjh_info.empty_card)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "炸金花转换info:", sys.utils.json_encode(info))
    return info
end
_M.ZJH = ZJH

local function SG(item)
    --ngx.log(ngx.ERR, "三公牌局信息:",item.card_value)
    local sg_info = api_def.GAME_INFO.SG
    local card_value = item.card_value
    if #card_value ~= sg_info.card_value_bytes then
        ngx.log(ngx.ERR, "牌局信息错误,card_value:", card_value)
        return nil, "牌局信息错误"
    end
    local info = {}
    info.self_seat_no = item.chair_id
    info.banker_seat_no = tonumber(string.sub(card_value, #card_value,#card_value))
    info.players = convert(card_value, sg_info.player_num, sg_info.card_count,sg_info.empty_card)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "三公转换info:", sys.utils.json_encode(info))
    return info
end
_M.SG = SG

local function YZLH(item)
    --ngx.log(ngx.ERR, "压庄龙虎牌局信息:",item.card_value)
    --local sg_info = api_def.GAME_INFO.SG
    local prize_map = {
        ["01"] = '龙',
        ["02"] = '虎',
        ["03"] = '和',
        ["04"] = '龙-黑桃',
        ["05"] = '龙-红桃',
        ["06"] = '龙-梅花',
        ["07"] = '龙-方块',
        ["08"] = '虎-黑桃',
        ["09"] = '虎-红桃',
        ["10"] = '虎-梅花',
        ["11"] = '虎-方块',
        ["12"] = '压庄赢',
        ["13"] = '压庄输',
    }
    local card_value = item.card_value
    local info = {}
    info.self_seat_no = item.chair_id
    info.cards = {}
    table.insert(info.cards, get_card_value(string.sub(card_value, 1,2)))
    table.insert(info.cards, get_card_value(string.sub(card_value, 3,4)))
    info.bet_area = ""
    --获取开奖点
    local bet_area = string.sub(card_value, 5, #card_value)
    for i=1, math.floor(#bet_area/2) do
        local prize_pot = prize_map[string.sub(bet_area, (i-1)*2+1, i*2)]
        if not prize_pot then
            ngx.log(ngx.ERR, "[", string.sub(bet_area, (i-1)*2+1, i*2), "]", "开奖点不存在")
        else
            if info.bet_area == "" then
                info.bet_area = info.bet_area .. prize_pot
            else
                info.bet_area = info.bet_area .. ',' .. prize_pot
            end
        end
        --table.insert(info.bet_area, string.sub(bet_area, (i-1)*2+1, i*2))
    end
    if info.bet_area == "" then
        info.bet_area = nil
    end
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "压庄龙虎转换info:", sys.utils.json_encode(info))
    return info
end
_M.YZLH = YZLH

local function TOP(item)
    --ngx.log(ngx.ERR, "21点牌局信息:",item.card_value)
    local card_value = item.card_value
    local info = {}
    info.self_seat_no = item.chair_id
    info.players = top_convert(card_value)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "21点转换info:", sys.utils.json_encode(info))
    return info
end
_M.TOP = TOP

local function TBNN(item)
    --ngx.log(ngx.ERR, "通比牛牛牌局信息:",item.card_value)
    local tbnn_info = api_def.GAME_INFO.TBNN
    local card_value = item.card_value
    if #card_value ~= tbnn_info.card_value_bytes then
        ngx.log(ngx.ERR, "牌局信息错误,card_value:", card_value)
        return nil, "牌局信息错误"
    end
    local info = {}
    info.self_seat_no = item.chair_id
    info.winner_seat_no = tonumber(string.sub(card_value, #card_value,#card_value))
    info.players = convert(card_value, tbnn_info.player_num, tbnn_info.card_count, tbnn_info.empty_card)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "通比牛牛转换info:", sys.utils.json_encode(info))
    return info
end
_M.TBNN = TBNN

local function QZPJ(item)
    --ngx.log(ngx.ERR, "抢庄牌九信息:",item.card_value)
    local qzpj_info = api_def.GAME_INFO.QZPJ
    local card_value = item.card_value
    if #card_value ~= qzpj_info.card_value_bytes then
        ngx.log(ngx.ERR, "牌局信息错误,card_value:", card_value)
        return nil, "牌局信息错误"
    end
    local info = {}
    info.self_seat_no = item.chair_id
    info.banker_seat_no = tonumber(string.sub(card_value, #card_value,#card_value))
    info.players = pj_convert(card_value,qzpj_info.player_num,qzpj_info.card_count,qzpj_info.empty_card)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "抢庄牌九转换info:", sys.utils.json_encode(info))
    return info
end
_M.QZPJ = QZPJ

local function JSZJH(item)
    --ngx.log(ngx.ERR, "急速炸金花牌局信息:",item.card_value)
    local jszjh_info = api_def.GAME_INFO.JSZJH
    local card_value = item.card_value
    if #card_value ~= jszjh_info.card_value_bytes then
        ngx.log(ngx.ERR, "牌局信息错误,card_value:", card_value)
        return nil, "牌局信息错误"
    end
    local info = {}
    info.self_seat_no = item.chair_id
    info.winner_seat_no = tonumber(string.sub(card_value, #card_value,#card_value))
    info.players = convert(card_value,jszjh_info.player_num,jszjh_info.card_count,jszjh_info.empty_card)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "急速炸金花转换info:", sys.utils.json_encode(info))
    return info
end
_M.JSZJH = JSZJH

local function DDZ(item)
    --ngx.log(ngx.ERR, "斗地主牌局信息:",item.card_value)
    local ddz_info = api_def.GAME_INFO.DDZ
    local card_value = item.card_value
    if #card_value ~= ddz_info.card_value_bytes then
        ngx.log(ngx.ERR, "牌局信息错误,card_value:", card_value)
        return nil, "牌局信息错误"
    end
    local info = {}
    info.self_seat_no = item.chair_id
    info.landlords_seat_no = tonumber(string.sub(card_value, #card_value,#card_value))
    info.players = convert(card_value, ddz_info.player_num,ddz_info.card_count)
    info.public = public_convert(card_value, ddz_info.p_start_index, ddz_info.p_end_index, ddz_info.p_card_count)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "斗地主转换info:", sys.utils.json_encode(info))
    return info
end
_M.DDZ = DDZ

local function SSS(item)
    --ngx.log(ngx.ERR, "十三水牌局信息:",item.card_value)
    --local sss_info = api_def.GAME_INFO.SSS
    local card_value = item.card_value
    local info = {}
    info.self_seat_no = item.chair_id
    info.players = sss_convert(card_value)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "十三水转换info:", sys.utils.json_encode(info))
    return info
end
_M.SSS = SSS

local function XYWZ(item)
    --ngx.log(ngx.ERR, "幸运五张牌局信息:",item.card_value)ngx.log(ngx.ERR, "二八杠牌局信息:",item.card_value)
    local xywz_info = api_def.GAME_INFO.XYWZ
    local card_value = item.card_value
    if #card_value~=10 and #card_value~=21 then
        ngx.log(ngx.ERR, "牌局信息错误,card_value:", card_value)
        return nil, "牌局信息错误"
    end
    local info = {}
    info.self_seat_no = item.chair_id
    info.cards = {}
    table.insert(info.cards, xywz_convert(string.sub(card_value,1 ,10),5))
    --info.before = xywz_convert(string.sub(card_value,1 ,10),5)
    if #card_value==21 then
        table.insert(info.cards, xywz_convert(string.sub(card_value,xywz_info.after_start_index, #card_value), 5))
        --info.after = xywz_convert(string.sub(card_value,xywz_info.after_start_index, #card_value), 5)
    else
        table.insert(info.cards, {})
        --info.after = {}
    end
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "幸运五张转换info:", sys.utils.json_encode(info))
    return info
end
_M.XYWZ = XYWZ

local function SLM(item)
    --ngx.log(ngx.ERR, "射龙门牌局信息:",item.card_value)
    local card_value = item.card_value
    local info = {}
    info.self_seat_no = item.chair_id
    info.cards = slm_convert(card_value)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "射龙门转换info:", sys.utils.json_encode(info))
    return info
end
_M.SLM = SLM

local function KSZ(item)
    --ngx.log(ngx.ERR, "看三张牌局信息:",item.card_value)
    local ksz_info = api_def.GAME_INFO.KSZ
    local card_value = item.card_value
    if #card_value ~= ksz_info.card_value_bytes then
        ngx.log(ngx.ERR, "牌局信息错误,card_value:", card_value)
        return nil, "牌局信息错误"
    end
    local info = {}
    info.self_seat_no = item.chair_id
    info.banker_seat_no = tonumber(string.sub(card_value, #card_value,#card_value))
    info.players = convert(card_value,ksz_info.player_num,ksz_info.card_count,ksz_info.empty_card)
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "看三张转换info:", sys.utils.json_encode(info))
    return info
end
_M.KSZ = KSZ

local function BJL(item)
    local bet_map = {
        ["2"] = '庄',
        ["1"] = '闲',
        ["4"] = '上庄赢',
        ["5"] = '上庄输',
        ["3"] = '和',
        ["6"] = '庄对',
        ["7"] = '闲对',
        ["8"] = '大',
        ["9"] = '小',
    }
    --ngx.log(ngx.ERR, "百家乐牌局信息:",item.card_value)
    local bjl_info = api_def.GAME_INFO.BJL
    local card_value = item.card_value
    local info = {}
    info.self_seat_no = item.chair_id
    info.cards = {}
    --获取庄家点数
    table.insert(info.cards, bjl_convert(card_value, bjl_info.banker_start_index, bjl_info.banker_end_index, bjl_info.card_count, bjl_info.empty_card))
    --获取闲家点数
    table.insert(info.cards, bjl_convert(card_value, bjl_info.player_start_index, bjl_info.player_end_index, bjl_info.card_count, bjl_info.empty_card))
    --获取胜利下注点
    info.bet_area = ""
    for i=13,#card_value do
        local bet_pot = bet_map[string.sub(card_value, i, i)]
        if not bet_pot then
            ngx.log(ngx.ERR, "[", bet_pot, "]", "下注点不存在")
        else
            if info.bet_area=="" then
                info.bet_area = info.bet_area .. bet_pot
            else
                info.bet_area = info.bet_area .. "," .. bet_pot
            end
        end
        --table.insert(info.bet_area, tonumber(string.sub(card_value, i, i)))
    end
    if info.bet_area=="" then
        info.bet_area = nil
    end
    --ngx.log(ngx.ERR, "原始牌型:", item.card_value)
    --ngx.log(ngx.ERR, "百家乐转换info:", sys.utils.json_encode(info))
    return info
end
_M.BJL = BJL

return _M
