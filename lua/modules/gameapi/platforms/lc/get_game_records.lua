---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liujinxiang.
--- DateTime: 2019/3/25 17:53
---

local sys = require("server.sys")
local utils = require("resty.utils.misc_utils")
local api_def = require("gapi_platform.three_game.lc.lc_api_def")
local api_manage = require("gapi_platform.three_game.lc.lc_api_manage")
local record_convert = require("gapi_platform.three_game.lc.record_convert")
local gapi_conf = require("gapi_platform.bundles.gapi_conf")
local game_manager = require 'gapi_platform.three_game.game_manager'

local function fmt_game_detail(record_data)
    if not api_def.GAME_KIND_MAP[tostring(record_data.game_code)] then
        ngx.log(ngx.ERR, "不存在此游戏,game_code:",record_data.game_code)
        return nil, "不存在此游戏"
    end
    local res, err = record_convert[api_def.GAME_KIND_MAP[tostring(record_data.game_code)]](record_data)
    if not res then
        ngx.log(ngx.ERR, "[ fmt_game_detail ]:", "游戏记录转换错误, card_value:", record_data.card_value, ", err:", err)
        return
    end
    return res
end

--[[
   {
       "LineCode":["30068_undefined"],
       "GameID":["50-1525742528-1847116-2"],
       "CellScore":["0.00000000000"],
       "ChannelID":[30068],
       "ServerID":[9001],
       "UserCount":[1],
       "CardValue":["1a0a1201"],
       "GameEndTime":["2018-05-08 09:22:37"],
       "KindID":[900],
       "ChairID":[0],
       "TableID":[1800201001],
       "GameStartTime":["2018-05-08 09:22:08"],
       "Revenue":["0.00000000000"],
       "Profit":["-2.00000000000"],
       "Bet":["6.00000000000"],
       "Account":["30068_10000031"]
   }
]]
local function fmt_data(platform_code, timezone, data)
    local result = {}
    local count = data.count
    local temp_data = {}
    for i = 1, count do
        temp_data[i] = {}
        temp_data[i].GameID = data.data_array.GameID[i]
        temp_data[i].Accounts = data.data_array.Accounts[i]
        temp_data[i].ServerID = data.data_array.ServerID[i]
        temp_data[i].KindID = data.data_array.KindID[i]
        temp_data[i].TableID = data.data_array.TableID[i]
        temp_data[i].ChairID = data.data_array.ChairID[i]
        temp_data[i].UserCount = data.data_array.UserCount[i]
        temp_data[i].CardValue = data.data_array.CardValue[i]
        temp_data[i].CellScore = data.data_array.CellScore[i]
        temp_data[i].AllBet = data.data_array.AllBet[i]
        temp_data[i].Profit = data.data_array.Profit[i]
        temp_data[i].Revenue = data.data_array.Revenue[i]
        temp_data[i].GameStartTime = data.data_array.GameStartTime[i]
        temp_data[i].GameEndTime = data.data_array.GameEndTime[i]
        temp_data[i].ChannelID = data.data_array.ChannelID[i]
        temp_data[i].LineCode = data.data_array.LineCode and type(data.data_array.LineCode[i]) and data.data_array.LineCode[i] or ""

        local account = data.data_array.Accounts[i]
        local _start, _end = string.find(account, '_')
        if not _start or not _end or (_start and _end and _start ~= _end) then
            ngx.log(ngx.ERR, '[LC] 玩家账号解析错误: ', utils.json_encode(data[i]))
            --return false, '[LC] Get game records 玩家账号解析错误.'
        else
            temp_data[i].user_id = string.sub(account, (_start + 1), #account)
        end
    end

    for i=1,#temp_data do
        local item = {
            round_id = temp_data[i].GameID,
            bizorg_id = biz_id,
            user_id = temp_data[i].user_id,
            platform_code = platform_code,
            game_code = temp_data[i].KindID,

            bet_no = temp_data[i].KindID .. "-" .. temp_data[i].Accounts .. "-" .. temp_data[i].GameID,
            innings_no = platform_code .. "_" .. temp_data[i].GameID,

            --bet_details = v.betResult,
            bet_number = 1,
            bet_time = utils.revise_time(temp_data[i].GameStartTime, timezone or 0),
            --bet_result = v.result,
            revenue = temp_data[i].Revenue or 0,
            amount = tonumber(temp_data[i].AllBet),
            valid_amount = tonumber(temp_data[i].CellScore),
            variables = tonumber(temp_data[i].Profit),
            prize_amount = 0,
            prize_time = utils.revise_time(temp_data[i].GameEndTime, timezone or 0),
            payout_amount = 0,
            currency = api_def.CURRENCY_MAP["RMB"],
            original_detail = utils.json_encode(temp_data[i]),
        }
        local record_info = {
            game_code = temp_data[i].KindID,
            room_id = temp_data[i].ServerID,
            table_id = temp_data[i].TableID,
            chair_id = temp_data[i].ChairID,
            card_value = temp_data[i].CardValue,
        }
        --item.remark = fmt_game_detail(record_info)
        local remark = fmt_game_detail(record_info)
        if remark~=nil then
            if remark.bet_area then
                item.bet_details = remark.bet_area
                remark.bet_area = nil
            end
            item.remark = sys.utils.json_encode(remark)
        end
        --ngx.log(ngx.ERR, "item.remark:", item.remark)
        if item.variables > 0 then
            item.bet_result = 1
            item.prize_amount = tonumber(temp_data[i].Profit) + tonumber(temp_data[i].AllBet)
            item.payout_amount = tonumber(temp_data[i].Profit)
        elseif item.variables < 0 then
            item.bet_result = -1
        else
            item.bet_result = 0
        end
        table.insert(result, item)
    end
    return game_manager.fmt_data(result)
end

--[[ ===================================================================================================================
]]

local args = sys.request.get_post_json_args()
local ok, err = sys.utils.check_keys(args, { 'sign', 'params' })
if not ok then
    ngx.log(ngx.ERR, '[LC] 请求参数错误. error=', err, ", args=", sys.utils.json_encode(args))
    return sys.say(sys.ERR_CODE.PARAM_ERR, "参数错误:" .. err)
end

local params = args.params
local ok, err = sys.utils.check_keys(params, { 'timezone', 'duration', "platform_agent", "platform_id"})
if not ok then
    ngx.log(ngx.ERR, '[LC] 请求参数[params]错误. error=', err, ", args=", sys.utils.json_encode(args))
    return sys.say(sys.ERR_CODE.PARAM_ERR, "参数[params]错误:" .. err)
end


local sign = args.sign
local sign = os.time(sys.utils.str_to_time(sign))

local offset = params.offset or 0
local platform_id = params.platform_id


local timezone = tonumber(params.timezone) or 0
local duration = tonumber(params.duration)

local start_time = (sign - duration*0.5)
local end_time = (sign + duration*0.5)

local cur_time = os.time()
if end_time >= cur_time  then
    end_time = cur_time
    start_time = end_time - duration
end
if offset > 0 then
    start_time = start_time - offset
    end_time = end_time - offset
end


ngx.log(ngx.ERR, '===>>  获取[LC]游戏记录, timezone: ', timezone, ', 时间[',
        os.date("%Y-%m-%d %H:%M:%S", start_time),
        ']~[',
        os.date("%Y-%m-%d %H:%M:%S", end_time),
        ']')

-- 获取API接入信息
local agent = params.platform_agent

--测试用账号信息
--local agent = {
--    agent_id = "9",
--    des_key = "C8BD2B46BE59BDD0",
--    md5_key = "0855A67EFAC62ECF",
--    api_url = "https://dmfapi.ky34.com:189/channelHandle",
--    records_url = "https://dmfrecord.ky34.com:190/getRecordHandle"
--}

local platform_def = gapi_conf.platform_def[platform_id]
if not platform_def then
    return sys.say(sys.ERR_CODE.PARAM_ERR, string.format("gapi_conf的platform_def未定义游戏平台[%s]信息", platform_id))
end
local agent_def = platform_def.agent_def
if not agent_def then
    return sys.say(sys.ERR_CODE.PARAM_ERR, string.format("gapi_conf的platform_def未定义游戏平台[%s]的agent_def信息", platform_id))
end
local ok, err = sys.utils.check_keys(agent, agent_def)
if not ok then
    return sys.say(sys.ERR_CODE.PARAM_ERR, "agent参数错误", { err = err })
end

local p = {
    -- user_id = user_id,
    start_time = start_time*1000,
    end_time = end_time*1000,
}
local res, err = api_manage.get_game_record(p, agent)
if not res then
    return sys.say(sys.ERR_CODE.SYS_ERR, "获取游戏记录失败", { err = err })
end

--抢庄牛牛
local test_res = {
    count=16,
    data_array={
        LineCode={"9_lc9001","9_lc9001","9_lc9001","9_lc9001","9_lc9001","9_lc9001","9_lc9001","9_lc9001","9_lc9001","9_lc9001","9_lc9001","9_lc9001","9_lc9001",
                  "9_lc9001","9_lc9001","9_lc9001"},
        GameID={"50-1553650428-11792984-2","50-1553650473-11793038-4","50-1553650473-11793038-5","50-1553650473-11793038-6","50-1553650473-11793038-7",
                "50-1553650473-11793038-8","50-1553650473-11793038-9","50-1553650473-11793038-10","50-1553650473-11793038-10","50-1553650473-11793038-10",
                "50-1553650473-11793038-10","50-1553650473-11793038-10","50-1553650473-11793038-10","50-1553650473-11793038-10","50-1553650473-11793038-10",
                "50-1553650473-11793038-10"},
        CellScore={"2.00","3.00","3.00","3.00","3.00","3.00","3.00","3.00","3.00","3.00","3.00","3.00","3.00","3.00","3.00","3.00"},
        ChannelID={9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
        ServerID={8301,3600,7201,2201,8601,9001,6001,8701,7301,2301,6101,6301,3801,3901,8901,9101},
        UserCount={4,9,4,5,5,2,5,6,4,9,3,4,1,1,6},
        CardValue={
            "0922192d0b1d151634280335323b14313c0a38374",
            "0709292a0000000000000000252b0000211104281d181a",
            "5326814a3",
            "161c1d000000262c2d000000363c3d5",
            "161c1d000000262c2d000000363c3d5",
            "161c0112",
            "02d1317,13d062a,2032703,323253d-233b|41c29|5393b",
            "360c2c1418000000000000000000000000000000360c2c141800000000001",
            "14120000151611331",
            "161c1d000000262c2d000000363c3d161c1d000000161c1d0000005",
            "3611323d092505041c0b222d2414390c29420a16061901151a313a0d2b08272a02073537341726182c38231333033b431d3c1b2112281",
            "3b2c110,04352607384,323d2d1d0d7,4;342b0b1,2336062a1a2,22123929096,1;083a3c0,33252731011,131516171c5,2;1112131415161718191a1b1c1d263;0",
            --"3611323d093611323d090",
            "3611323d09",
            "3611320",
            "0922192d0b1d151634280335323b14313c0a38374",
            "2a23332a1c0441",
        },
        GameEndTime={"2019-03-27 09:34:20","2019-03-27 09:34:59","2019-03-27 09:34:59","2019-03-27 09:34:59","2019-03-27 09:34:59","2019-03-27 09:34:59",
                     "2019-03-27 09:34:59","2019-03-27 09:34:59","2019-03-27 09:34:59","2019-03-27 09:34:59","2019-03-27 09:34:59","2019-03-27 09:34:59",
                    "2019-03-27 09:34:59","2019-03-27 09:34:59","2019-03-27 09:34:59","2019-03-27 09:34:59"},
        KindID={830,620,720,220,860,900,600,870,730,230,610,630,380,390,890,910},
        ChairID={2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        TableID={1660200002,1660200002,1660200002,1660200002,1660200002,1660200002,1660200002,1660200002,1660200002,1660200002,1660200002,1660200002,1660200002,
                 1660200002,1660200002,1660200002},
        GameStartTime={"2019-03-27 09:33:48","2019-03-27 09:34:33","2019-03-27 09:34:33","2019-03-27 09:34:33","2019-03-27 09:34:33","2019-03-27 09:34:33",
                       "2019-03-27 09:34:33","2019-03-27 09:34:33","2019-03-27 09:34:33","2019-03-27 09:34:33","2019-03-27 09:34:33","2019-03-27 09:34:33",
                       "2019-03-27 09:34:33","2019-03-27 09:34:33","2019-03-27 09:34:33","2019-03-27 09:34:33"},
        Revenue={"0.10","0.15","0.15","0.15","0.15","0.15","0.15","0.15","0.15","0.15","0.15","0.15","0.15","0.15","0.15","0.15"},
        Profit={"1.90","2.85","2.85","2.85","2.85","2.85","2.85","2.85","2.85","2.85","2.85","2.85","2.85","2.85","2.85","2.85"},
        AllBet={"2.00","3.00","3.00","3.00","3.00","3.00","3.00","3.00","2.85","2.85","2.85","2.85","2.85","2.85","2.85","2.85"},
        Accounts={"9_15210100011","9_15210100011","9_15210100011","9_15210100011","9_15210100011","9_15210100011","9_15210100011","9_15210100011","9_15210100011",
                "9_15210100011","9_15210100011","9_15210100011","9_15210100011","9_15210100011","9_15210100011","9_15210100011"},
    }
}

--local res = sys.utils.json_encode(test_res)

ngx.log(ngx.ERR, "拉取游戏res:", sys.utils.json_encode(res))
local result = {
    sign = os.date("%Y-%m-%d %H:%M:%S", tonumber(end_time + offset)),
    records = fmt_data(platform_id, timezone, res)
}
return sys.say(sys.ERR_CODE.SUCCESS, "获取记录成功", result)
