---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dongyf.
--- DateTime: 2018/6/23 下午2:46
---
local redis_help = require "resty.utils.db.redis_db"

local _M = {}

--[[
    redis分布锁
    lock_name  锁名字  redis key
    value      key对应的值  要求每次不一样
    try_num    尝试次数
    lock_timeout   超时时间，超时后主动释放key

    return 1 成功 0 失败 -1 返回值未知 -2 尝试多次后执行失败
]]
function _M.acquire_lock(redis, lock_name, value, try_num, lock_timeout)
    local script = [[
        local key = KEYS[1]
        local value = ARGV[1]
        local outTime = ARGV[2]
        local num = redis.call("setnx",key,value)
        if num == 1 then
            redis.call("expire",key,outTime)
        end

        return num
    ]]

    local redis_cli = redis
    for i = 1, try_num do
        if not redis_cli then
            redis_cli = redis_help:new();
            if not redis_cli then
                ngx.log(ngx.ERR, 'redis new fail.')
            else
                local res, err = redis_cli:eval(script, 1, lock_name, value, lock_timeout)
                if not res then
                    ngx.log(ngx.ERR, 'redis_cli:eval fail. err: ', err)
                else
                    res = tonumber(res)
                    if res == 1 then
                        return true, 1
                    elseif res == 0 then
                        return false, 0
                    else
                        return false, -1
                    end
                end
            end
        else
            local res, err = redis_cli:eval(script, 1, lock_name, value, lock_timeout)
            if not res then
                ngx.log(ngx.ERR, 'redis_cli:eval fail. err: ', err)
            else
                res = tonumber(res)
                if res == 1 then
                    return true, 1
                elseif res == 0 then
                    return false, 0
                else
                    return false, -1
                end
            end
        end
        ngx.sleep(0.2)
    end

    return false, -2
end

--[[
    redis分布锁
    lock_name  锁名字  redis key
    value      key对应的值  要求是和acquire_lock传入的value一致，否则执行失败
    try_num    尝试次数

    return 1 成功 0 失败 -1 返回值未知 -2 尝试多次后执行失败
]]
function _M.del_lock(redis, lock_name, value, try_num)
    local script = [[
        local key =KEYS[1]
        local value = ARGV[1]
        if redis.call("get",key) == value then
            return redis.call("del",key)
        else
            return 0
        end
    ]]

    local redis_cli = redis
    try_num = tonumber(try_num)
    for i = 1, try_num do
        if not redis_cli then
            redis_cli = redis_help:new();
            if not redis_cli then
                ngx.log(ngx.ERR, 'redis new fail.')
            else
                local res, err = redis_cli:eval(script, 1, lock_name, value)
                if not res then
                    ngx.log(ngx.ERR, 'redis_cli:eval fail. err: ', err)
                else
                    res = tonumber(res)
                    if res == 1 then
                        return true, 1
                    elseif res == 0 then
                        return false, 0
                    else
                        return false, -1
                    end
                end
            end
        else
            local res, err = redis_cli:eval(script, 1, lock_name, value)
            if not res then
                ngx.log(ngx.ERR, 'redis_cli:eval fail. err: ', err)
            else
                res = tonumber(res)
                if res == 1 then
                    return true, 1
                elseif res == 0 then
                    return false, 0
                else
                    return false, -1
                end
            end

        end
        ngx.sleep(0.2)
    end

    return false, -2
end


return _M